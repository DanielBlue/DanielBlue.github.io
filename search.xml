<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android文件操作的内部存储和外部存储]]></title>
      <url>https://danielblue.github.io/2017/09/01/Android%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%9A%84%E5%86%85%E9%83%A8%E5%AD%98%E5%82%A8%E5%92%8C%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<h1 id="Android文件操作的内部存储和外部存储"><a href="#Android文件操作的内部存储和外部存储" class="headerlink" title="Android文件操作的内部存储和外部存储"></a>Android文件操作的内部存储和外部存储</h1><pre><code>Android中的内部存储和外部储存。
简单来说，外部存储就是你通过文件管理能够访问到的地方，包括手机外部存储和SD卡存储。
而内部存储是只有你的应用才能访问到的。
</code></pre><p>首先需要取得读写权限</p>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;

&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;
</code></pre><h2 id="1-内部存储"><a href="#1-内部存储" class="headerlink" title="1. 内部存储"></a>1. 内部存储</h2><p><strong>内部存储还有你的应用可以访问到。</strong><br><strong>并且在卸载之后，系统会移除你应用在此的所有文件</strong>。<br><br><strong>内部存储一直可以访问到</strong></p>
<h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><pre><code>getCacheDir()：/data/data/&lt;your package&gt;/cache
getFilesDir()：/data/data/&lt;your package&gt;/files
getDataDirectory()：/data
getDownloadCacheDirectory()：/cache
</code></pre><h2 id="2-外部存储"><a href="#2-外部存储" class="headerlink" title="2.外部存储"></a>2.外部存储</h2><p><strong>外部存储是共有的，所有应用可以访问到。</strong><br><br><strong>外部存储不是一直可以访问，通过usb挂载之后就会访问不到</strong><br><br><strong>在卸载之后，<code>getExternalCacheDir</code>和<code>getExternalFilesDir(String string)</code>中存储的文件会移除。</strong><br></p>
<h4 id="手机外部存储"><a href="#手机外部存储" class="headerlink" title="手机外部存储"></a>手机外部存储</h4><pre><code>Environment.getExternalStorageState()：mounted(Environment.MEDIA_MOUNTED)
Environment.getExternalStorageDirectory()：/storage/emulated/0
Environment.getExternalStoragePublicDirectory(&quot;&quot;)：/storage/emulated/0
Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES)：/storage/emulated/0/Movies
getExternalCacheDir：/storage/emulated/0/Android/data/&lt;your package&gt;/cache
getExternalFilesDir(null)：/storage/emulated/0/Android/data/&lt;your package&gt;/files
getExternalFilesDir(Environment.DIRECTORY_MOVIES)：/storage/emulated/0/Android/data/&lt;your package&gt;/files/Movies
</code></pre><p>如果你的api版本低于8，那么不能使用getExternalFilesDir()，而是使用Environment.getExternalStorageDirectory()获得根目录，再去找到相关文件夹进行操作<br><br>因为api 8以下的版本在操作外部存储的文件时没有专门为私有文件和公共文件的操作提供api支持。</p>
<h4 id="SD卡存储"><a href="#SD卡存储" class="headerlink" title="SD卡存储"></a>SD卡存储</h4><p>内存卡其实也属于外部存储，但是Android没有直接的API可以操作，我们需要通过反射来获取所有可用的外部存储的路径。</p>
<ul>
<li><p>获取SD卡装载状态</p>
<pre><code>public static List&lt;String&gt; listAvaliableStorage(Context context) {
    ArrayList storagges = new ArrayList();
    StorageManager storageManager = (StorageManager) context.getSystemService(Context.STORAGE_SERVICE);
    try {
        Class&lt;?&gt;[] paramClasses = {};
        Method getVolumeList = StorageManager.class.getMethod(&quot;getVolumeList&quot;, paramClasses);
        getVolumeList.setAccessible(true);
        Object[] params = {};
        Object[] invokes = (Object[]) getVolumeList.invoke(storageManager, params);
        if (invokes != null) {
            for (int i = 0; i &lt; invokes.length; i++) {
                Object obj = invokes[i];
                Method getPath = obj.getClass().getMethod(&quot;getPath&quot;, new Class[0]);
                String path = (String) getPath.invoke(obj, new Object[0]);
                String state = null;
                try {
                    Method getVolumeState = StorageManager.class.getMethod(&quot;getVolumeState&quot;, String.class);
                    state = (String) getVolumeState.invoke(storageManager, path);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (state.equals(Environment.MEDIA_MOUNTED)) {
                    storagges.add(path);
                }
            }
        }
    } catch (NoSuchMethodException e1) {
        e1.printStackTrace();
    } catch (IllegalArgumentException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    storagges.trimToSize();

    return storagges;
}
</code></pre><p>返回的<code>List&lt;String&gt;</code>就包括了所有可用的外部储存器的目录，其中第一个元素就是我们手机的外部存储路径<code>/storage/emulated/0</code>，后面一个或多个都是装载的SD卡。我们便可以通过集合的大小来判断是否有可用的SD卡。</p>
</li>
<li><p>获取SD卡路径<br>  <br><code>System.getenv(&quot;ENV_EXTERNAL_STORAGE&quot;)</code>可以得到储存卡的根目录，但是需要注意是没有装载SD卡的情况下，依然会返回SD卡的根目录路径，所以需要再做判断。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android中的存储 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安装ubuntu16.04后的一些设置]]></title>
      <url>https://danielblue.github.io/2017/03/22/%E5%AE%89%E8%A3%85ubuntu16.04%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="卸载那些不常用的软件"><a href="#卸载那些不常用的软件" class="headerlink" title="卸载那些不常用的软件"></a>卸载那些不常用的软件</h2><ul>
<li><p>先安装更新</p>
<pre><code>sudo apt-get update
sudo apt-get upgrade
</code></pre></li>
<li><p>卸载libreOffice</p>
<pre><code>sudo apt-get remove libreoffice-common
</code></pre></li>
<li><p>删除Amazon的链接</p>
<pre><code>sudo apt-get remove unity-webapps-common
</code></pre></li>
<li><p>删掉基本不用的自带软件</p>
<pre><code>sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install
</code></pre></li>
</ul>
<h2 id="将主目录文件夹设置为英文"><a href="#将主目录文件夹设置为英文" class="headerlink" title="将主目录文件夹设置为英文"></a>将主目录文件夹设置为英文</h2><p>首先更改系统语言环境为英文  <br><br><code>export LANG=en_US</code>   <br><br>然后更改设置  <br><br><code>xdg-user-dirs-gtk-update</code>  <br><br>然后出现下图，选”更新名称”  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/ubuntu%E9%87%8D%E8%A3%85%E9%85%8D%E7%BD%AE/lang_en.jpg" alt="">  <br><br>接着更改回中文语言环境  <br><br><code>export LANG=zh_CN.UTF-8</code>  <br><br>再次执行  <br><br><code>xdg-user-dirs-gtk-update</code>  <br><br>此时再次弹出界面，选择“保留旧的名称”,并”不要再次询问”  <br></p>
<h2 id="将windows和ubuntu时间同步"><a href="#将windows和ubuntu时间同步" class="headerlink" title="将windows和ubuntu时间同步"></a>将windows和ubuntu时间同步</h2><p>先在ubuntu下更新一下时间，确保时间无误：  <br><br><code>sudo apt-get install ntpdate</code>  <br><br><code>sudo ntpdate time.windows.com</code>  <br><br>然后将时间更新到硬件上：  <br><br><code>sudo hwclock --localtime --systohc</code>  <br></p>
<h2 id="Vysor连接手机黑屏"><a href="#Vysor连接手机黑屏" class="headerlink" title="Vysor连接手机黑屏"></a>Vysor连接手机黑屏</h2><p>在Google浏览器地址栏输入“chrome://nacl/”  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/ubuntu%E9%87%8D%E8%A3%85%E9%85%8D%E7%BD%AE/vysor_1.jpg" alt="">  <br><br>如果 PNaCl translator是Not installed:状态，   <br><br>在Google地址栏输入“chrome://components ”，并找到“pnacl”它应该显示 version listed is 0.0.0.0  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/ubuntu%E9%87%8D%E8%A3%85%E9%85%8D%E7%BD%AE/vysor_2.png" alt=""><br>点击“检查是否有更新”，下载自动安装更新pnacl，在打开Vysor，连接Android，解决显示黑屏问题。  <br></p>
<h2 id="创建AndroidStudio快捷方式"><a href="#创建AndroidStudio快捷方式" class="headerlink" title="创建AndroidStudio快捷方式"></a>创建AndroidStudio快捷方式</h2><p>在/usr/share/applications 目录下，新建以软件名称命名的文件AndroidStudio.desktop  <br></p>
<p>$ sudo gedit /usr/share/applications/AndroidStudio.desktop  <br><br>编辑AndroidStudio.desktop  <br></p>
<pre><code>[Desktop Entry]
Encoding=UTF-8
Name=AndroidStudio
Comment=AndroidStudio IDE
Exec=/usr/local/develop/bin/studio.sh  #根据软件的具体执行路径修改
Icon=/usr/local/develop/bin/studio.png  #根据软件的具体执行路径修改
Terminal=false  #软件打开时是否启动终端
StartupNotify=false
Type=Application
Categories=Application;
</code></pre><p>进入/usr/share/applications 将相应图标复制到桌面即可  <br></p>
]]></content>
      
        <categories>
            
            <category> 开发中的坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下配置Android开发环境]]></title>
      <url>https://danielblue.github.io/2017/03/17/Ubuntu%E4%B8%8B%E9%85%8D%E7%BD%AEAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h2 id="配置JDK"><a href="#配置JDK" class="headerlink" title="配置JDK"></a>配置JDK</h2><ol>
<li><strong>下载JDK</strong>：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a> </li>
</ol>
<ul>
<li><strong>解压</strong>：<code>在~/下载/</code>下打开终端，执行<code>sudo tar -xzf jdk-8u121-linux-x64.tar.gz</code>，然后会多出<code>jdk1.8.0_121</code>这个文件夹，执行<code>sudo mv jdk1.8.0_121 /usr/lib/</code>将<code>jdk1.8.0_121</code>移动到<code>/usr/lib</code>目录下。</li>
<li><p><strong>配置jdk环境变量</strong>：执行<code>gedit /etc/profile</code>，将</p>
<pre><code>export JAVA_HOME=/usr/lib/jdk1.8.0_121 
export JRE_HOME=${JAVA_HOME}/jre 
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib 
export PATH=${JAVA_HOME}/bin:$PATH
</code></pre><p>加到文件末尾处。</p>
</li>
<li><p><strong>测试</strong>：在终端执行<code>java -version</code>，如果出现下面字样则jdk环境配置成功。  <br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/Ubuntu%E4%B8%8B%E9%85%8D%E7%BD%AEAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/jdk%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.png" alt=""> </p>
</li>
</ul>
<h2 id="配置SDK"><a href="#配置SDK" class="headerlink" title="配置SDK"></a>配置SDK</h2><ol>
<li><strong>下载SDK</strong>：<a href="https://pan.baidu.com/s/1mhTCTja" target="_blank" rel="external">https://pan.baidu.com/s/1mhTCTja</a>   <br><code>PS：如果网页的百度云点击下载，没反应，就登录账号后点再点下载。</code></li>
</ol>
<ul>
<li><strong>解压</strong>：在<code>~</code>主目录下新建文件夹<code>develop</code>，再<code>~/下载/</code>执行<code>tar -zxf android-sdk_r24.4.1-linux.tgz</code>，然后会出现<code>android-sdk-linux</code>这个文件夹,执行<code>sudo mv android-sdk-linux ~/develop/</code>。</li>
<li><strong>设置读写权限</strong>：进入到<code>~/develop/</code>文件夹下，打开终端<code>chmod a+x,a+w,a+r ~/develop/android-sdk-linux -R</code></li>
<li><p><strong>配置环境变量</strong>：执行<code>gedit /etc/profile</code>，将</p>
<pre><code>export SDK_HOME=/home/maoqi/develop/android-sdk-linux  
export PATH=$SDK_HOME/tools:$SDK_HOME/platform-tools:$PATH
</code></pre></li>
</ul>
<p>加到文件末尾处。</p>
<ul>
<li><p><strong>PS</strong>：如果我们是在64位的ubuntu环境下安装的话还要安装相关的32位库：  <br></p>
<pre><code>apt-get install lib32ncurses5 ​
apt-get install lib32z1
</code></pre></li>
</ul>
<ul>
<li><strong>测试</strong>：打开终端，执行<code>android</code>，出现SDK Manager则成功，这时可以在SDK Manager中将SDK下好。</li>
</ul>
<h2 id="安装AndroidStudio"><a href="#安装AndroidStudio" class="headerlink" title="安装AndroidStudio"></a>安装AndroidStudio</h2><ol>
<li><strong>下载AndroidStudio</strong>:<a href="http://www.android-studio.org/" target="_blank" rel="external">http://www.android-studio.org/</a> </li>
</ol>
<ul>
<li><strong>解压</strong>：因为我下载的是zip格式，所以执行<code>unzip android-studio-ide-162.3764568-linux.zip</code>j解压，然后将解压的<code>android-studio</code>文件夹移动到develop文件夹下，执行<code>sudo mv android-studio ~/develop</code>。</li>
<li><strong>打开AndroidStudio</strong>：<code>cd ~/develop/android-studio/bin</code>进入bin目录，执行<code>./studio.sh</code>打开AndroidStudio。</li>
<li><strong>PS</strong>：第一次打开AndroidStudio会下载gradle，速度会非常慢，具体解决办法可以看这篇文章<a href="http://blog.csdn.net/junbujianwpl/article/details/51587977" target="_blank" rel="external">http://blog.csdn.net/junbujianwpl/article/details/51587977</a> </li>
<li><strong>PPS</strong>：gradle所有版本下载地址：<a href="http://services.gradle.org/distributions/" target="_blank" rel="external">http://services.gradle.org/distributions/</a> </li>
</ul>
]]></content>
      
        <categories>
            
            <category> 开发中的坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Stduio实用插件]]></title>
      <url>https://danielblue.github.io/2017/03/16/Android%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h2 id="Android-Stduio实用插件"><a href="#Android-Stduio实用插件" class="headerlink" title="Android Stduio实用插件"></a>Android Stduio实用插件</h2><ol>
<li><p>GsonFormat：将服务器端返回的Json数据直接生成相应的实体类，这个绝对是神器。  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GsonFormat.gif" alt=""></p>
</li>
<li><p>Android Parcelable Code Generator：Android中的序列化有两种方式，分别是实现Serializable接口和Parcelable接口，但在Android中是推荐使用Parcelable，有了这个插件就比较容易了。  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Parcelable.gif" alt=""></p>
</li>
<li><p>Android Postfix Completion：将你想要Toast或Log打印的信息使用X.log或X.toast自动生成代码。  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Android%20Postfix%20Completion.gif" alt=""></p>
</li>
</ol>
<h2 id="Windows工具"><a href="#Windows工具" class="headerlink" title="Windows工具"></a>Windows工具</h2><ol>
<li>HiJson:格式化Json字符串的工具  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/HiJson.png" alt=""></li>
<li>Fiddler:抓接口的工具  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Fiddler.jpg" alt=""></li>
<li>MarkdownPad:md文档编辑器  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/MarkdownPad.jpg" alt=""></li>
<li>LICEcap:录屏软件  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/LICEcap.jpg" alt=""></li>
<li>SQLite Expert Professional:查看SQLite数据库结构的工具  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/SQLite%20Expert%20Professional.jpg" alt=""></li>
<li>ColorPix:颜色拾取器  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/ColorPix.jpg" alt=""></li>
</ol>
<h2 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a>Chrome插件</h2><ol>
<li>JSONview:当前页面如果是JSON数据，则会自动格式化  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/JSONview.jpg" alt=""></li>
<li>Octotree:阅读Github时，会在浏览器左侧生成当前项目的目录结构图  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Octotree.jpg" alt=""></li>
<li>OneTab:一键回收保存当前所有页面，有时候打开很多页面比较占内存，但是之后可能有用。就可以用这个。  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/One Tab.jpg" alt=""></li>
<li>Postman:可以模拟HTTP请求，强烈推荐  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/PostMan.jpg" alt=""></li>
<li>Vysor:将手机屏幕投影到电脑上操作，使用真机开发时，方便很多。  <br><br><img src="https://raw.githubusercontent.com/DanielBlue/img/master/2017.3.16_Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vysor.jpg" alt=""></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 开发工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android Studio插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AndroidAnnotation注解框架的配置]]></title>
      <url>https://danielblue.github.io/2017/03/10/AndroidAnnotation%E6%B3%A8%E8%A7%A3%E6%A1%86%E6%9E%B6%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="Android-Studio中配置AndroidAnnotation"><a href="#Android-Studio中配置AndroidAnnotation" class="headerlink" title="Android Studio中配置AndroidAnnotation"></a>Android Studio中配置AndroidAnnotation</h2><p>首先在打开project目录下的build.gradle，在<code>dependencies</code>中添加</p>
<pre><code>classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.4&apos;
</code></pre><p>如下图<br><img src="https://github.com/DanielBlue/img/blob/master/project.jpg?raw=true" alt=""></p>
<p>然后打开app目录下的build.gradle，添加</p>
<pre><code>apply plugin: &apos;android-apt&apos;
def AAVersion = &apos;4.0.0&apos;
</code></pre><p>如下图<br><img src="https://github.com/DanielBlue/img/blob/master/app1.jpg?raw=true" alt=""></p>
<p>然后在<code>dependencies</code>中加入</p>
<pre><code>apt &quot;org.androidannotations:androidannotations:$AAVersion&quot;
compile &quot;org.androidannotations:androidannotations-api:$AAVersion&quot;
</code></pre><p>如下图<br><img src="https://github.com/DanielBlue/img/blob/master/app2.jpg?raw=true" alt=""></p>
<p>然后sync即可。<br><br></p>
<h2 id="关于eclipse中用到AndroidAnnotation的项目转到Android-Studio的坑"><a href="#关于eclipse中用到AndroidAnnotation的项目转到Android-Studio的坑" class="headerlink" title="关于eclipse中用到AndroidAnnotation的项目转到Android Studio的坑"></a>关于eclipse中用到AndroidAnnotation的项目转到Android Studio的坑</h2><p>  <br>之前遇到将项目转到AS后，编译无法自动在debug生成<code>_</code>文件，后来才发现是eclipse使用的AndroidAnnotation的版本和Android Studio的使用的版本不一致，更换后即完美运行。</p>
]]></content>
      
        <categories>
            
            <category> 开发中的坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidAnnotation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git相关操作]]></title>
      <url>https://danielblue.github.io/2017/02/20/git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="配置身份"><a href="#配置身份" class="headerlink" title="配置身份"></a>配置身份</h2><pre><code>git config --global user.name &quot;your name&quot;
git config --global user.email &quot;your email&quot;
</code></pre><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><pre><code>进入到保存文件的文件夹，
git init创建一个git仓库
ls -al可以查看Git本地所有的操作
删除文件夹就可以删掉仓库
</code></pre><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><pre><code>git add 添加文件到缓存区(add后面加一个. 代表所有文件)
git status 查看缓存区
git commit -m 提交缓存区的代码&quot;Frist commit&quot;
</code></pre><h2 id="向github提交代码"><a href="#向github提交代码" class="headerlink" title="向github提交代码"></a>向github提交代码</h2><pre><code>1.ssh -keygen -t rsa生成密钥id_rsa和公钥id_rasa.pub
在C/用户/username/.ssh下可以找到

2.将公钥添加到Github上，
ssh -T git@github.com测试是否配对成功

3.git push origin master 把本地代码推到远程master分支
git pull origin master 把远程代码更新到本地
git clone (ssh地址) 将远程代码克隆到本地

4.git remote add name (ssh地址) 将本地仓库和远程仓库关联起来
git remote -v查看有哪些远程仓库
</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code>git diff 查看代码修改的地方
git branch 当前分支情况
git branch name 创建name分支
git checkout name 切换到name分支
git checkout -b name 创建name分支，并切换
git branch -d name 删除name分支
git branch -D name 强制删除name
git merge name 将name分支合并到当前分支
</code></pre><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><pre><code>git config --global alias.lg &quot;log --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit --date=relative&quot;    记录打印彩色
</code></pre><h2 id="撤销未提交的修改"><a href="#撤销未提交的修改" class="headerlink" title="撤销未提交的修改"></a>撤销未提交的修改</h2><pre><code>git check filePath    撤销未add的修改
git    reset HEAD    filePath    撤销已经add的修改
git log ID -1 -p    查看ID这次操作具体修改了什么内容
</code></pre>]]></content>
      
        <categories>
            
            <category> 开发工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[华为6.0的WRITE_SETTING权限问题]]></title>
      <url>https://danielblue.github.io/2017/02/18/%E5%8D%8E%E4%B8%BA6.0%E7%9A%84WRITE-SETTING%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>今天在开发中适配华为mate8(6.0)，遇到了注册中申请，并在BaseActivity也手动申请了WRITE_SETTING，依然报权限错误。查了下资料，发现是WRITE_SETTING的权限不能自动授权，也不能运行时请求授权，只能引导用户去开启。<br><a id="more"></a></excerpt></p>
<pre><code>核心代码
//6.0以上才能调用
@TargetApi(23)
void checkPermission(){
    if(!Settings.System.canWrite(this)){
      Intent intent = new Intent(Settings.ACTION_MANAGE_WRITE_SETTINGS,
                Uri.parse(&quot;package:&quot; + getPackageName()));
      startActivityForResult(intent, REQUEST_CODE);
    } 
}
</code></pre><p>在代码中调用checkPermission()，则需要检查当前设备的sdk版本，在低版本上直接调用会报错</p>
<pre><code>if (Build.VERSION.SDK_INT &gt;= 23) {
    checkPermission();
}
</code></pre><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
      
        <categories>
            
            <category> 开发中的坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 6.0权限 </tag>
            
            <tag> WRITE_SETTING </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vitamio使用问题总结]]></title>
      <url>https://danielblue.github.io/2017/02/18/Vitamio%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="Vitamio使用问题总结"><a href="#Vitamio使用问题总结" class="headerlink" title="Vitamio使用问题总结"></a>Vitamio使用问题总结</h2><h3 id="1-横竖屏切换-视频不重新加载"><a href="#1-横竖屏切换-视频不重新加载" class="headerlink" title="1.横竖屏切换,视频不重新加载"></a>1.横竖屏切换,视频不重新加载</h3><pre><code>首先要让activity在切屏时不重新走生命周期
在manifest中配置actiovity，android:configChanges=&quot;keyboardHidden|orientation|screenSize&quot;,
然后在Activity中重写onConfigurationChanged()方法。

@Override
public void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);
    if (CONFIGURATION_TYPE == TYPE_PORTRAIT) {
        //竖屏切横屏逻辑处理            
        turn2Landscape();
    } else if (CONFIGURATION_TYPE == TYPE_LANDSCAPE) {
        //横屏切竖屏逻辑处理
        turn2Portrait();
        }
    }
}
</code></pre><h3 id="2-横竖屏切换-如何使控制器大小随视频的切换而变化"><a href="#2-横竖屏切换-如何使控制器大小随视频的切换而变化" class="headerlink" title="2.横竖屏切换,如何使控制器大小随视频的切换而变化"></a>2.横竖屏切换,如何使控制器大小随视频的切换而变化</h3><pre><code>核心思路:将控制器的view加到一个ViewGroup中来控制大小

在自定义的MediaController构造方法中加入;

RelativeLayout.LayoutParams p = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);

mRoot.setLayoutParams(p);

 //container就是一个包裹着视频的ViewGroup
 ((RelativeLayout) container).addView(mRoot);
</code></pre><h3 id="3-视频进度跳转逻辑处理"><a href="#3-视频进度跳转逻辑处理" class="headerlink" title="3.视频进度跳转逻辑处理"></a>3.视频进度跳转逻辑处理</h3><pre><code>一般是设置onInfoListener,在缓冲结束时跳转进度

@Override
public boolean onInfo(MediaPlayer mp, int what, int extra) {
    switch (what) {
        case MediaPlayer.MEDIA_INFO_BUFFERING_START:
            //开始缓冲,这里一般暂停播放并显示缓冲百分比等数据
            mp.pause();
            break;
        case MediaPlayer.MEDIA_INFO_BUFFERING_END:
            //缓冲结束，在这里seek到想要跳转到的进度
            mp.start();

            break;
    }
    return false;
}
</code></pre><h4 id="3-1-如果需要在退出时保存进度-或者是home键跳出时保存进度，则一般在Activity的onPause-方法中获取到进度，亲测在onDestory-中获取进度时-播放器已经释放掉了，无法获取到进度。"><a href="#3-1-如果需要在退出时保存进度-或者是home键跳出时保存进度，则一般在Activity的onPause-方法中获取到进度，亲测在onDestory-中获取进度时-播放器已经释放掉了，无法获取到进度。" class="headerlink" title="3.1 如果需要在退出时保存进度,或者是home键跳出时保存进度，则一般在Activity的onPause()方法中获取到进度，亲测在onDestory()中获取进度时,播放器已经释放掉了，无法获取到进度。"></a>3.1 如果需要在退出时保存进度,或者是home键跳出时保存进度，则一般在Activity的onPause()方法中获取到进度，亲测在onDestory()中获取进度时,播放器已经释放掉了，无法获取到进度。</h4><h4 id="3-2-home键退出-又返回的情况下保存进度-需要在onPrepare-中和缓冲结束后都调用seekTo-进行设置进度才可以有效。"><a href="#3-2-home键退出-又返回的情况下保存进度-需要在onPrepare-中和缓冲结束后都调用seekTo-进行设置进度才可以有效。" class="headerlink" title="3.2 home键退出,又返回的情况下保存进度,需要在onPrepare()中和缓冲结束后都调用seekTo(),进行设置进度才可以有效。"></a>3.2 home键退出,又返回的情况下保存进度,需要在onPrepare()中和缓冲结束后都调用seekTo(),进行设置进度才可以有效。</h4>]]></content>
      
        <categories>
            
            <category> 开发中的坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Vitamio </tag>
            
            <tag> 视频播放 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RecycleView点击事件错位的问题]]></title>
      <url>https://danielblue.github.io/2017/02/18/RecycleView%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E9%94%99%E4%BD%8D%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>使用RecycleView实现如下的效果</p>
<p><img src="https://github.com/DanielBlue/img/blob/master/listview.gif?raw=true" alt=""></p>
<p>却发现一个问题，无论点击哪一个item，都是第三个item的状态改变，最后发现是因为把点击事件放到了onBindViewHolder()方法中了，每一次点击改变的都会是最后一个item。于是把点击事件放到ViewHolder的构造函数中，问题完美解决</p>
]]></content>
      
        <categories>
            
            <category> 开发中的坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RecyclerView </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
