<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[AndroidAnnotation注解框架的配置]]></title>
      <url>https://danielblue.github.io/2017/03/10/AndroidAnnotation%E6%B3%A8%E8%A7%A3%E6%A1%86%E6%9E%B6%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="Android-Studio中配置AndroidAnnotation"><a href="#Android-Studio中配置AndroidAnnotation" class="headerlink" title="Android Studio中配置AndroidAnnotation"></a>Android Studio中配置AndroidAnnotation</h2><p>首先在打开project目录下的build.gradle，在<code>dependencies</code>中添加</p>
<pre><code>classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.4&apos;
</code></pre><p>如下图<br><img src="https://github.com/DanielBlue/img/blob/master/project.jpg?raw=true" alt=""></p>
<p>然后打开app目录下的build.gradle，添加</p>
<pre><code>apply plugin: &apos;android-apt&apos;
def AAVersion = &apos;4.0.0&apos;
</code></pre><p>如下图<br><img src="https://github.com/DanielBlue/img/blob/master/app1.jpg?raw=true" alt=""></p>
<p>然后在<code>dependencies</code>中加入</p>
<pre><code>apt &quot;org.androidannotations:androidannotations:$AAVersion&quot;
compile &quot;org.androidannotations:androidannotations-api:$AAVersion&quot;
</code></pre><p>如下图<br><img src="https://github.com/DanielBlue/img/blob/master/app2.jpg?raw=true" alt=""></p>
<p>然后sync即可。<br><br></p>
<h2 id="关于eclipse中用到AndroidAnnotation的项目转到Android-Studio的坑"><a href="#关于eclipse中用到AndroidAnnotation的项目转到Android-Studio的坑" class="headerlink" title="关于eclipse中用到AndroidAnnotation的项目转到Android Studio的坑"></a>关于eclipse中用到AndroidAnnotation的项目转到Android Studio的坑</h2><p>  <br>之前遇到将项目转到AS后，编译无法自动在debug生成<code>_</code>文件，后来才发现是eclipse使用的AndroidAnnotation的版本和Android Studio的使用的版本不一致，更换后即完美运行。</p>
]]></content>
      
        <categories>
            
            <category> 开发中的坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidAnnotation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git相关操作]]></title>
      <url>https://danielblue.github.io/2017/02/20/git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="配置身份"><a href="#配置身份" class="headerlink" title="配置身份"></a>配置身份</h2><pre><code>git config --global user.name &quot;your name&quot;
git config --global user.email &quot;your email&quot;
</code></pre><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><pre><code>进入到保存文件的文件夹，
git init创建一个git仓库
ls -al可以查看Git本地所有的操作
删除文件夹就可以删掉仓库
</code></pre><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><pre><code>git add 添加文件到缓存区(add后面加一个. 代表所有文件)
git status 查看缓存区
git commit -m 提交缓存区的代码&quot;Frist commit&quot;
</code></pre><h2 id="向github提交代码"><a href="#向github提交代码" class="headerlink" title="向github提交代码"></a>向github提交代码</h2><pre><code>1.ssh -keygen -t rsa生成密钥id_rsa和公钥id_rasa.pub
在C/用户/username/.ssh下可以找到

2.将公钥添加到Github上，
ssh -T git@github.com测试是否配对成功

3.git push origin master 把本地代码推到远程master分支
git pull origin master 把远程代码更新到本地
git clone (ssh地址) 将远程代码克隆到本地

4.git remote add name (ssh地址) 将本地仓库和远程仓库关联起来
git remote -v查看有哪些远程仓库
</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code>git diff 查看代码修改的地方
git branch 当前分支情况
git branch name 创建name分支
git checkout name 切换到name分支
git checkout -b name 创建name分支，并切换
git branch -d name 删除name分支
git branch -D name 强制删除name
git merge name 将name分支合并到当前分支
</code></pre><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><pre><code>git config --global alias.lg &quot;log --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit --date=relative&quot;    记录打印彩色
</code></pre><h2 id="撤销未提交的修改"><a href="#撤销未提交的修改" class="headerlink" title="撤销未提交的修改"></a>撤销未提交的修改</h2><pre><code>git check filePath    撤销未add的修改
git    reset HEAD    filePath    撤销已经add的修改
git log ID -1 -p    查看ID这次操作具体修改了什么内容
</code></pre>]]></content>
      
        <categories>
            
            <category> 开发工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[华为6.0的WRITE_SETTING权限问题]]></title>
      <url>https://danielblue.github.io/2017/02/18/%E5%8D%8E%E4%B8%BA6.0%E7%9A%84WRITE-SETTING%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>今天在开发中适配华为mate8(6.0)，遇到了注册中申请，并在BaseActivity也手动申请了WRITE_SETTING，依然报权限错误。查了下资料，发现是WRITE_SETTING的权限不能自动授权，也不能运行时请求授权，只能引导用户去开启。<br><a id="more"></a></excerpt></p>
<pre><code>核心代码
//6.0以上才能调用
@TargetApi(23)
void checkPermission(){
    if(!Settings.System.canWrite(this)){
      Intent intent = new Intent(Settings.ACTION_MANAGE_WRITE_SETTINGS,
                Uri.parse(&quot;package:&quot; + getPackageName()));
      startActivityForResult(intent, REQUEST_CODE);
    } 
}
</code></pre><p>在代码中调用checkPermission()，则需要检查当前设备的sdk版本，在低版本上直接调用会报错</p>
<pre><code>if (Build.VERSION.SDK_INT &gt;= 23) {
    checkPermission();
}
</code></pre><the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
      
        <categories>
            
            <category> 开发中的坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 6.0权限 </tag>
            
            <tag> WRITE_SETTING </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vitamio使用问题总结]]></title>
      <url>https://danielblue.github.io/2017/02/18/Vitamio%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="Vitamio使用问题总结"><a href="#Vitamio使用问题总结" class="headerlink" title="Vitamio使用问题总结"></a>Vitamio使用问题总结</h2><h3 id="1-横竖屏切换-视频不重新加载"><a href="#1-横竖屏切换-视频不重新加载" class="headerlink" title="1.横竖屏切换,视频不重新加载"></a>1.横竖屏切换,视频不重新加载</h3><pre><code>首先要让activity在切屏时不重新走生命周期
在manifest中配置actiovity，android:configChanges=&quot;keyboardHidden|orientation|screenSize&quot;,
然后在Activity中重写onConfigurationChanged()方法。

@Override
public void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);
    if (CONFIGURATION_TYPE == TYPE_PORTRAIT) {
        //竖屏切横屏逻辑处理            
        turn2Landscape();
    } else if (CONFIGURATION_TYPE == TYPE_LANDSCAPE) {
        //横屏切竖屏逻辑处理
        turn2Portrait();
        }
    }
}
</code></pre><h3 id="2-横竖屏切换-如何使控制器大小随视频的切换而变化"><a href="#2-横竖屏切换-如何使控制器大小随视频的切换而变化" class="headerlink" title="2.横竖屏切换,如何使控制器大小随视频的切换而变化"></a>2.横竖屏切换,如何使控制器大小随视频的切换而变化</h3><pre><code>核心思路:将控制器的view加到一个ViewGroup中来控制大小

在自定义的MediaController构造方法中加入;

RelativeLayout.LayoutParams p = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);

mRoot.setLayoutParams(p);

 //container就是一个包裹着视频的ViewGroup
 ((RelativeLayout) container).addView(mRoot);
</code></pre><h3 id="3-视频进度跳转逻辑处理"><a href="#3-视频进度跳转逻辑处理" class="headerlink" title="3.视频进度跳转逻辑处理"></a>3.视频进度跳转逻辑处理</h3><pre><code>一般是设置onInfoListener,在缓冲结束时跳转进度

@Override
public boolean onInfo(MediaPlayer mp, int what, int extra) {
    switch (what) {
        case MediaPlayer.MEDIA_INFO_BUFFERING_START:
            //开始缓冲,这里一般暂停播放并显示缓冲百分比等数据
            mp.pause();
            break;
        case MediaPlayer.MEDIA_INFO_BUFFERING_END:
            //缓冲结束，在这里seek到想要跳转到的进度
            mp.start();

            break;
    }
    return false;
}
</code></pre><h4 id="3-1-如果需要在退出时保存进度-或者是home键跳出时保存进度，则一般在Activity的onPause-方法中获取到进度，亲测在onDestory-中获取进度时-播放器已经释放掉了，无法获取到进度。"><a href="#3-1-如果需要在退出时保存进度-或者是home键跳出时保存进度，则一般在Activity的onPause-方法中获取到进度，亲测在onDestory-中获取进度时-播放器已经释放掉了，无法获取到进度。" class="headerlink" title="3.1 如果需要在退出时保存进度,或者是home键跳出时保存进度，则一般在Activity的onPause()方法中获取到进度，亲测在onDestory()中获取进度时,播放器已经释放掉了，无法获取到进度。"></a>3.1 如果需要在退出时保存进度,或者是home键跳出时保存进度，则一般在Activity的onPause()方法中获取到进度，亲测在onDestory()中获取进度时,播放器已经释放掉了，无法获取到进度。</h4><h4 id="3-2-home键退出-又返回的情况下保存进度-需要在onPrepare-中和缓冲结束后都调用seekTo-进行设置进度才可以有效。"><a href="#3-2-home键退出-又返回的情况下保存进度-需要在onPrepare-中和缓冲结束后都调用seekTo-进行设置进度才可以有效。" class="headerlink" title="3.2 home键退出,又返回的情况下保存进度,需要在onPrepare()中和缓冲结束后都调用seekTo(),进行设置进度才可以有效。"></a>3.2 home键退出,又返回的情况下保存进度,需要在onPrepare()中和缓冲结束后都调用seekTo(),进行设置进度才可以有效。</h4>]]></content>
      
        <categories>
            
            <category> 开发中的坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Vitamio </tag>
            
            <tag> 视频播放 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RecycleView点击事件错位的问题]]></title>
      <url>https://danielblue.github.io/2017/02/18/RecycleView%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E9%94%99%E4%BD%8D%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>使用RecycleView实现如下的效果</p>
<p><img src="https://github.com/DanielBlue/img/blob/master/listview.gif?raw=true" alt=""></p>
<p>却发现一个问题，无论点击哪一个item，都是第三个item的状态改变，最后发现是因为把点击事件放到了onBindViewHolder()方法中了，每一次点击改变的都会是最后一个item。于是把点击事件放到ViewHolder的构造函数中，问题完美解决</p>
]]></content>
      
        <categories>
            
            <category> 开发中的坑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RecyclerView </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
